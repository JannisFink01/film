import { Repository, SelectQueryBuilder } from 'typeorm';
import {schauspieler} from '../entity/schauspieler.ts';
import { Film } from '../entity/film.js';
export interface BuildIdParams{
    id:number;
    mitSchauspielern?:boolean;
}
@injectable()
export class QueryBuilder{
    readonly #filmAlias:string=`${Film.name.charAt(0).toLowerCase()}${Film.name.slice(1)}`;
    readonly #titelAlias:string=`${Titel.name.charAt(0).toLowerCase()}${Titel.slice(1)}`;
    readonly #schauspielerAlias:string=`${Schauspieler.name.charAt(0).loLowerCase()}${Schauspieler.slice(1)}`;
    readonly #repo: Repository<Film>;
    readonly #logger : =getLogger(QueryBuilder.name);
    constructor(@injectRepository(Film) repo :Repository<Film>){
        this.#repo=repo;
    }
    buildId({id, mitSchauspielern =false}: BuildIdParams):SelectQueryBuilder<Film>{
        const queryBuilder	: SelectQueryBuilder<Film>=this.#repo.createQueryBuilder(this.#filmAlias);
        queryBuilder.innerJoinAndSelect(
            `${this.#filmAlias}.titel`,
            this.#titelAlias,
        );
        if(mitSchauspielern){
            queryBuilder.leftJoinAndSelect(
                `${this.#filmAlias}.schauspieler`,
                this.#schauspielerAlias,
            );
        }
        queryBuilder.where(`${this.#filmAlias}.id=id`,{id: id});
        return queryBuilder;
    }
    build(suchkriterien:Record<string,any>){
        this.#logger.debug('build: suchkriterien=%o', suchkriterien);

        let queryBuilder=this.#repo.createQueryBuilder(this.#filmAlias);
        queryBuilder.innerJoinAndSelect(`${this.#filmAlias}.titel`,'titel');
        const{titel, javascript, typescript, ...props }=suchkriterien;
        let useWhere : boolean =true;
        if(titel !== undefined && typeof titel === 'string'){
            const ilike :"ilike"|"like"=
            typeOrmModuleOptions.type ==='postgres'?'ilike':'like';
            queryBuilder = queryBuilder.where(
                `${this.#titelAlias}.titel ${ilike} :titel`,
                {titel: `%${titel}%`},
            );
            export let typeOrmModuleOptions: TypeOrmModuleOptions;
switch (dbType) {
    case 'postgres': {
        typeOrmModuleOptions = {
            type: 'postgres',
            host,
            port: 5432,
            username,
            password: pass,
            database,
            entities,
            namingStrategy,
            logging,
            logger,
        };
        // "rest properties" ab ES 2018: https://github.com/tc39/proposal-object-rest-spread
        const { password, ...typeOrmModuleOptionsLog } = typeOrmModuleOptions;
        if (!loggerDefaultValue) {
            console.debug('typeOrmModuleOptions: %o', typeOrmModuleOptionsLog);
        }
        break;
    }
    case 'mysql': {
        typeOrmModuleOptions = {
            type: 'mysql',
            host,
            port: 3306,
            username,
            password: pass,
            database,
            entities,
            namingStrategy,
            supportBigNumbers: true,
            logging,
            logger,
        };
        // "rest properties" ab ES 2018: https://github.com/tc39/proposal-object-rest-spread
        const { password, ...typeOrmModuleOptionsLog } = typeOrmModuleOptions;
        if (!loggerDefaultValue) {
            console.debug('typeOrmModuleOptions: %o', typeOrmModuleOptionsLog);
        }
        break;
    }
    // 'better-sqlite3' erfordert Python zum Uebersetzen, wenn das Docker-Image gebaut wird
    case 'sqlite': {
        typeOrmModuleOptions = {
            type: 'sqlite',
            database: `${database}.sqlite`,
            entities,
            namingStrategy,
            logging,
            logger,
        };
        if (!loggerDefaultValue) {
            console.debug('typeOrmModuleOptions: %o', typeOrmModuleOptions);
        }
        break;
    }
    default: {
        typeOrmModuleOptions = {
            type: 'postgres',
            host,
            port: 5432,
            username,
            password: pass,
            database,
            entities,
            logging,
            logger,
        };
        break;
    }
}
Object.freeze(typeOrmModuleOptions);

export const dbPopulate = DB_POPULATE?.toLowerCase() === 'true';
export const adminDataSourceOptions: DataSourceOptions =
    dbType === 'mysql'
        ? {
              type: 'mysql',
              host,
              port: 3306,
              username: 'root',
              password: passAdmin,
              database,
              namingStrategy,
              supportBigNumbers: true,
              logging,
              logger,
          }
        : {
              type: 'postgres',
              host,
              port: 5432,
              username: 'postgres',
              password: passAdmin,
              database,
              schema: database,
              namingStrategy,
              logging,
              logger,
          };


        }


    }

}
